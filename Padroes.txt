O Decorator usar quando tivermos comportamentos que podem ser compostos por comportamentos de outras classes envolvidas em uma mesma hierarquia;

Chain of Responsibility cai como uma luva quando temos uma lista de comandos a serem executados de acordo com algum cenário em específico, e sabemos também qual o próximo cenário que deve ser validado, caso o anterior não satisfaça a condição, Nesses casos, o Chain of Responsibility nos possibilita a separação de responsabilidades em classes pequenas e enxutas, e ainda provê uma maneira flexível e desacoplada de juntar esses comportamentos novamente;

State serve para gerenciar estados de um objeto;

builder para criar objetos complexos;

strategy para possibilitar a flexibilização de um algoritmo, trocando partes do mesmo;

Observer permite que diversas ações sejam executadas de forma transparente à classe principal, reduzindo o acoplamento entre essas ações, facilitando a manutenção e evolução do código.;

Template Method Quando temos diferentes algoritmos que possuem estruturas parecidas, o Template Method é uma boa solução.


